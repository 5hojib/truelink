name: Auto Tag and Upload TrueLink Package

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  tag_and_publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: Extract Version from File
        id: version
        run: |
          VERSION=$(grep -E '__version__ = ".*"' src/truelink/__init__.py | cut -d\" -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Check for Existing Release
        id: check_release
        run: |
          VERSION=${{ env.VERSION }}
          TAG_WITH_V="v$VERSION"
          TAG_PLAIN="$VERSION"

          CODE_WITH_V=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_WITH_V)
          CODE_PLAIN=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_PLAIN)

          if [ "$CODE_WITH_V" -eq 200 ] || [ "$CODE_PLAIN" -eq 200 ]; then
            echo "Release already exists."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No matching release found."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Get Commit Messages Since Last Release
        id: get_commits
        if: env.RELEASE_EXISTS == 'false'
        run: |
          VERSION=${{ env.VERSION }}
          LAST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "")

          echo "## Release Notes v$VERSION" > release_notes.txt
          echo "" >> release_notes.txt

          if [ -n "$LAST_TAG" ]; then
            echo "### Changes since $LAST_TAG:" >> release_notes.txt
            echo "" >> release_notes.txt
            git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges >> release_notes.txt
          else
            echo "### Initial Release" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "- Initial release of TrueLink library" >> release_notes.txt
          fi

          echo "" >> release_notes.txt
          echo "### Latest Commit:" >> release_notes.txt
          echo "**$(git log -1 --pretty=format:"%s")**" >> release_notes.txt
          echo "" >> release_notes.txt
          git log -1 --pretty=format:"%b" >> release_notes.txt

          echo "Generated release notes:"
          cat release_notes.txt

      - name: Install Dependencies
        if: env.RELEASE_EXISTS == 'false'
        run: uv sync --all-extras

      - name: Build Package
        if: env.RELEASE_EXISTS == 'false'
        run: uv build

      - name: Create New Release
        if: env.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: ./release_notes.txt
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: env.RELEASE_EXISTS == 'false'
        run: uv publish --token ${{ secrets.PYPI_API_TOKEN }}
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    needs: tag_and_publish
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: needs.tag_and_publish.result == 'success'
        run: |
          echo "üéâ Successfully released TrueLink v${{ env.VERSION }}"
          echo "üì¶ Package available at: https://pypi.org/project/truelink/"
          echo "üìã Release notes: https://github.com/$GITHUB_REPOSITORY/releases/tag/v${{ env.VERSION }}"

      - name: Notify Failure
        if: needs.tag_and_publish.result == 'failure'
        run: |
          echo "‚ùå Failed to release TrueLink v${{ env.VERSION }}"
          echo "Please check the workflow logs for details."